import { magic } from '../../lib/magic'
import { createSession } from '../../lib/auth-cookies'
import { q, client } from '../../lib/faunadb'
import { createHandlers } from '../../lib/rest-utils'

/**
 * Create a user in FaunaDB using the
 * DIDT signed attachment as the "password".
 */
function createUser(email, password) {
  return client.query(q.Create(q.Collection("users"), {
    credentials: { password },
    data: { email },
  }))
}

/**
 * Gets a user ref by the given `email`.
 * If the ref does not exist, `undefined` is returned.
 */
function getUserByEmail(email) {
  return client.query(
    q.Get(q.Match(q.Index("users_by_email"), email))
  ).catch(() => undefined)
}

/**
 * Logs in the given `user`.
 *
 * The `password` is really just a signed attachment
 * in the DID token generated by the user upon login.
 */
function obtainToken(user, password) {
  if (user?.data?.email) console.log(`Creating FaunaDB token for ${user.data.email}`)

  return client.query(
    q.Login(q.Select("ref", user), { password })
  )
}

const handlers = {
  POST: async (req, res) => {
    const didToken = req.headers.authorization.substr(7)
    magic.token.validate(didToken, 'todomvc')

    const { email, issuer } = await magic.users.getMetadataByToken(didToken)
    const { add: password } = magic.token.decode(didToken)[1]

    // We auto-detect signups if `getUserByEmail` resolves to `undefined`
    const user = await getUserByEmail(email) ?? await createUser(email, password);
    const token = (await obtainToken(user, password)).secret;

    await createSession(res, { token, email, issuer })

    res.status(200).send({ done: true })
  }
}

export default function login(req, res) {
  const handler = createHandlers(handlers);
  return handler(req, res);
}
